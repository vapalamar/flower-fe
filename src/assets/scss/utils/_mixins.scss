// breakpoints
$mobile:            767px; // mobile 767px and less
$tablet:            1023px; // tablet 1023px {desctop + 1} and less

// breakpoints mixin
// @include breakpoint($mobile) {}
@mixin breakpoint($rule){
  @media only screen and (max-width: #{$rule}){
    @content;
  }
}

// @include prefix(transform, translateY(-50%));
// @include prefix(transition, (all 0.3s linear));
@mixin prefix($name, $argument) {
  #{$name}: $argument;
  -webkit-#{$name}: $argument;
  -ms-#{$name}: $argument;
  -moz-#{$name}: $argument;
  -o-#{$name}: $argument;
}

// @include transform($trans-x, $trans-y, $rotate);
@mixin transform($trans-x, $trans-y, $rotate) {
  -moz-transform: translate($trans-x, $trans-y) rotate($rotate);
  -o-transform: translate($trans-x, $trans-y) rotate($rotate);
  -ms-transform: translate($trans-x, $trans-y) rotate($rotate);
  -webkit-transform: translate($trans-x, $trans-y) rotate($rotate);
  transform: translate($trans-x, $trans-y) rotate($rotate);
}

// @include border-radius(5px);
@mixin border-radius($border-width: 5px) {
  border-radius: $border-width;
}

//@include inline-block(top);
@mixin inline-block($align:top) {
  display:inline-block;
  vertical-align:$align;
}

//@extend %clearfix;
// clearfix
%clearfix {
  &:after {
    content: " ";
    display: block;
    clear: both;
  }
}

//@extend %listreset;
// reset for list
%listreset {
  margin: 0;
  padding: 0;
  list-style: none;
}

// hide text
//@include hide-text;
@mixin hide-text {
  overflow: hidden;
  text-indent: -9999px;
}

// vertical align el inside parent with fixed height/min-height
// usage
// html - .parent>.child
// scss - @include v-align;
//     or @include v-align(250px);
//     or @include v-align(250px, bottom, before);
//
@mixin v-align($va-height: 100%, $va-direction: middle, $va-pseudo: after) {
  white-space: nowrap;
  text-align: center;

  &:#{$va-pseudo} {
    content: '';
    display: inline-block;
    vertical-align: $va-direction;
    width: 0;
    min-height: $va-height;
  }

  > * {
    white-space: normal;
    display: inline-block;
    vertical-align: $va-direction;
    max-width: 99%;
  }
}

// vertical align a pair of child el inside parent
// usage
// html - .post>.image+.text
// scss - @include v-align-pair(image, text);
//     or @include v-align-pair(image, text, bottom);
//     or @include v-align-pair(image, text, middle, 200px);
//
@mixin v-align-pair($child-name1, $child-name2, $valign: middle, $width1: auto, $width2: auto ) {
  display: table;
  .#{$child-name1}{
    display: table-cell;
    vertical-align: $valign;
    width: $width1;
  }
 .#{$child-name2} {
    display: table-cell;
    vertical-align: $valign;
    width: $width2;
  }
}


// vertical align el
// usage: @include vertical-align-el;
//
@mixin vertical-align-el {
  position: relative;
  top: 50%;
  transform: translateY(-50%);
}

/// Mixin helping defining both `width` and `height` simultaneously.
///
/// @author Hugo Giraudel
///
/// @access public
///
/// @param {Length} $width - Element’s `width`
/// @param {Length} $height ($width) - Element’s `height`
///
/// @example scss - Usage
///   .foo {
///     @include size(10em);
///   }
///
///   .bar {
///     @include size(100%, 10em);
///   }
///
/// @example css - CSS output
///   .foo {
///     width: 10em;
///     height: 10em;
///   }
///
///   .bar {
///     width: 100%;
///     height: 10em;
///   }
///
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

/// Hides the text in an element, commonly used to show an image. Some elements will need block-level styles applied.
///
/// @link http://zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement
///
/// @example scss - Usage
///   .element {
///     @include hide-text;
///   }
///
/// @example css - CSS Output
///   .element {
///     overflow: hidden;
///     text-indent: 101%;
///     white-space: nowrap;
///   }
///
@mixin hide-text {
  overflow: hidden;
  text-indent: 101%;
  white-space: nowrap;
}

/// Animate css properties
// usage
// scss - @include animate(color);
//     or @include animate(color width);
//     or @include animate(color width, 1s, linear);
//
$animation-speed: .3s !default;

@mixin animate($properties, $duration: $animation-speed, $easing: ease-in-out) {
  $list:();
  @each $prop in $properties {
    $str: #{$prop} #{$duration} #{$easing};
    $list: join($list, #{$str}, comma);
  }
  transition: $list;
}


/// Mixin for styling form-placeholders
/// @example scss - Usage
///   @include placeholder {
///    color: #333;
///   }
///
///   input[type='text'],
///   input[type='tel'],
///   input[type='email'] {
///     @include placeholder {
///      color: red;
///     }
///   }

@mixin placeholder {
  &::-webkit-input-placeholder {@content}
  &::-moz-placeholder {opacity: 1; @content}
  &:-moz-placeholder {@content}
  &:-ms-input-placeholder {@content}
  &.placeholder {@content}
}

/// Font-size px to rem calc
/// @example scss - Usage
/// selector {
///    @include rem-font-size(16px);
/// }

@mixin rem-font-size($pxSize) {
  font-size: $pxSize;
  font-size: ($pxSize / 10px) + rem;
}

// @mixin box-shadow(1px, 2px, 1px, #000, $inset: false);

@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
  @if $inset {
    -webkit-box-shadow:inset $top $left $blur $color;
    -moz-box-shadow:inset $top $left $blur $color;
    box-shadow:inset $top $left $blur $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $color;
    -moz-box-shadow: $top $left $blur $color;
    box-shadow: $top $left $blur $color;
  }
}

// @include fonts-include($font-name, $font-path, $font-weight, $font-style, $icomoon: false);
@mixin fonts-include($font-name, $font-path, $font-weight, $font-style, $icomoon: false ) {
  @font-face {
    font-family: "#{$font-name}";
    font-weight: $font-weight;
    font-style: $font-style;

    @if $icomoon == true {
      src: url('assets/fonts/icon-fonts/#{$font-path}.eot');
      src: url('assets/fonts/icon-fonts/#{$font-path}.eot?#iefix')   format('embedded-opentype'),
      url('assets/fonts/icon-fonts/#{$font-path}.woff')              format('woff'),
      url('assets/fonts/icon-fonts/#{$font-path}.ttf')               format('truetype'),
      url('assets/fonts/icon-fonts/#{$font-path}.svg##{$font-name}') format('svg');
    } @else {
      src: url("assets/fonts/#{$font-path}.woff") format("woff"),
      url("assets/fonts/#{$font-path}.woff2") format("woff2");
    }
  }
}
